dat2 <- dat %>%
mutate(script = map(data,~{
adat <- .
min_x <- adat$x %>% min()
if(min_x == 1){
init_offset <- 0
}else{
init_offset <- min_x - 1
}
ascript <- adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId")) %>%
mutate(offset = if_else(x == min_x, init_offset, 0)) %>%
mutate(width = lead(x) - 1) %>%
mutate(width = if_else(is.na(width), 12-(x+init_offset)+1,width)) %>%
mutate(col_script = str_c("column(width = ", width, ", offset = ", offset,", ")) %>%
mutate(frame_script = str_c(col_script,"ui_",labelid,")")) %>%
mutate(argument = if_else(input_output == "inputId", str_c(",",argument),argument)) %>%
mutate(widget_script = str_c("ui_",labelid," <- ",widget,"(",input_output," = '",labelid, "'", argument,")"))
return(ascript)
})) %>%
mutate(
frame_script = map_chr(script, ~{
str_c("fluidRow(\n    ",
str_c(.$frame_script,collapse = ",\n    "),
"\n  )",
collapse = "")
})
) %>%
mutate(
ui_frame_script = map_chr(script, ~{
str_c(.$widget_script,collapse = "\n")
})
)
ui_frame_script <- str_c(
"ui <- fluidPage(\n",
str_c(dat2$frame_script,collapse = ",\n"),
"\n)",
collapse = "\n"
)
ui_widgets_script <- str_c(
str_c(dat2$ui_frame_script,collapse = "\n")
)
cat(ui_frame_script)
cat(ui_widgets_script)
#Server section
temp <- dat2 %>% select(script) %>% unnest(script)
temp
inputids <- temp %>% filter(input_output == "inputId") %>% pull(labelid)
inputids
outputids <- temp %>% filter(input_output == "outputId") %>% pull(labelid)
outputids
if(length(inputids)>0){
input_list_script <- str_c("#Ids for input$ are:", str_c(inputids,collapse = ", "))
}else{
input_list_script <- ""
}
input_list_script
length(inputids)
input_list_script <- str_c("#Ids for input$ are:", str_c(inputids,collapse = ", "))
input_list_script
output_list_script <- str_c("output$", outputids," <- renderXXX({})")
output_list_script
dat2
temp
outputdat <- temp %>% filter(input_output == "outputId")
outputdat
outputdat <- temp %>% filter(input_output == "outputId") %>%
mutate(renderthis = str_extract(widget,"^.+(?=Output)"))
outputdat
outputdat
temp %>%
filter(input_output == "inputId")
inputids <- temp %>%
filter(input_output == "inputId") %>%
select(labelid)
inputids
inputids <- temp %>% filter(input_output == "inputId") %>% pull(labelid)
inputids
input_list_script <- str_c("#Ids for input$ are:", str_c(inputids,collapse = ", "))
input_list_script
outputdat <- temp %>% filter(input_output == "outputId") %>%
mutate(renderthis = str_extract(widget,"^.+(?=Output)"))
outputdat
outputdat <- temp %>% filter(input_output == "outputId") %>%
mutate(renderthis = str_extract(widget,"^.+(?=Output)")) %>%
select(labelid, renderthis)
outputdat
outputdat <- temp %>% filter(input_output == "outputId") %>%
mutate(renderthis = str_extract(widget,"^.+(?=Output)")) %>%
select(labelid, renderthis) %>%
mutate(Firstletter = str_to_upper(str_sub(renderthis,1,1)))
outputdat
outputdat <- temp %>% ungroup() %>%  filter(input_output == "outputId") %>%
mutate(renderthis = str_extract(widget,"^.+(?=Output)")) %>%
select(labelid, renderthis) %>%
mutate(Firstletter = str_to_upper(str_sub(renderthis,1,1))) %>%
mutate(remainigletters = renderthis[-1]
if(length(inputids)>0){
input_list_script <- str_c("#Ids for input$ are:", str_c(inputids,collapse = ", "))
}else{
input_list_script <- ""
}
if(length(outputids)>0){
output_list_script <- str_c("output$", outputids," <- renderXXX({})")
}else{
output_list_script <- ""
}
})
outputdat <- temp %>% ungroup() %>%  filter(input_output == "outputId") %>%
mutate(renderthis = str_extract(widget,"^.+(?=Output)")) %>%
select(labelid, renderthis) %>%
mutate(Firstletter = str_to_upper(str_sub(renderthis,1,1))) %>%
mutate(remainigletters = renderthis[-1])
outputdat <- temp %>% ungroup() %>%  filter(input_output == "outputId") %>%
mutate(renderthis = str_extract(widget,"^.+(?=Output)")) %>%
select(labelid, renderthis) %>%
mutate(Firstletter = str_to_upper(str_sub(renderthis,1,1))) %>%
mutate(remainigletters = str_sub(renderthis,2,length(renderthis)))
outputdat
outputdat <- temp %>% ungroup() %>%  filter(input_output == "outputId") %>%
mutate(renderthis = str_extract(widget,"^.+(?=Output)")) %>%
select(labelid, renderthis) %>%
mutate(Firstletter = str_to_upper(str_sub(renderthis,1,1))) %>%
mutate(remainigletters = str_sub(renderthis,2,nchar(renderthis)))
outputdat
outputdat <- temp %>% ungroup() %>%  filter(input_output == "outputId") %>%
mutate(renderthis = str_extract(widget,"^.+(?=Output)")) %>%
select(labelid, renderthis) %>%
mutate(Firstletter = str_to_upper(str_sub(renderthis,1,1))) %>%
mutate(remainigletters = str_sub(renderthis,2,nchar(renderthis))) %>%
mutate(Renderthis = str_c(Firstletter, remainingletters))
outputdat <- temp %>% ungroup() %>%  filter(input_output == "outputId") %>%
mutate(renderthis = str_extract(widget,"^.+(?=Output)")) %>%
select(labelid, renderthis) %>%
mutate(Firstletter = str_to_upper(str_sub(renderthis,1,1))) %>%
mutate(remainingletters = str_sub(renderthis,2,nchar(renderthis))) %>%
mutate(Renderthis = str_c(Firstletter, remainingletters))
outputdat
outputdat <- temp %>% ungroup() %>%  filter(input_output == "outputId") %>%
mutate(renderthis = str_extract(widget,"^.+(?=Output)")) %>%
select(labelid, renderthis) %>%
mutate(Firstletter = str_to_upper(str_sub(renderthis,1,1))) %>%
mutate(remainingletters = str_sub(renderthis,2,nchar(renderthis))) %>%
mutate(Renderthis = str_c(Firstletter, remainingletters)) %>%
mutate(output_list_script = str_c("output$", labelid, "<- render", Renderthis, "({\n})"))
outputdat
dat2 <- dat %>%
mutate(script = map(data,~{
adat <- .
min_x <- adat$x %>% min()
if(min_x == 1){
init_offset <- 0
}else{
init_offset <- min_x - 1
}
ascript <- adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId")) %>%
mutate(offset = if_else(x == min_x, init_offset, 0)) %>%
mutate(width = lead(x) - 1) %>%
mutate(width = if_else(is.na(width), 12-(x+init_offset)+1,width)) %>%
mutate(col_script = str_c("column(width = ", width, ", offset = ", offset,", ")) %>%
mutate(frame_script = str_c(col_script,"ui_",labelid,")")) %>%
mutate(argument = if_else(input_output == "inputId", str_c(",",argument),argument)) %>%
mutate(widget_script = str_c("ui_",labelid," <- ",widget,"(",input_output," = '",labelid, "'", argument,")"))
return(ascript)
})) %>%
mutate(
frame_script = map_chr(script, ~{
str_c("fluidRow(\n    ",
str_c(.$frame_script,collapse = ",\n    "),
"\n  )",
collapse = "")
})
) %>%
mutate(
ui_frame_script = map_chr(script, ~{
str_c(.$widget_script,collapse = "\n")
})
)
ui_frame_script <- str_c(
"ui <- fluidPage(\n",
str_c(dat2$frame_script,collapse = ",\n"),
"\n)",
collapse = "\n"
)
ui_widgets_script <- str_c(
str_c(dat2$ui_frame_script,collapse = "\n")
)
cat(ui_frame_script)
cat(ui_widgets_script)
#Server section
temp <- dat2 %>% select(script) %>% unnest(script)
inputids <- temp %>% filter(input_output == "inputId") %>% pull(labelid)
outputdat <- temp %>% ungroup() %>%  filter(input_output == "outputId") %>%
mutate(renderthis = str_extract(widget,"^.+(?=Output)")) %>%
select(labelid, renderthis) %>%
mutate(Firstletter = str_to_upper(str_sub(renderthis,1,1))) %>%
mutate(remainingletters = str_sub(renderthis,2,nchar(renderthis))) %>%
mutate(Renderthis = str_c(Firstletter, remainingletters)) %>%
mutate(output_list_script = str_c("  output$", labelid, "<- render", Renderthis, "({\n})"))
if(length(inputids)>0){
input_list_script <- str_c("  #Ids for input$ are:", str_c(inputids,collapse = ", "))
}else{
input_list_script <- ""
}
if(nrow(outputdat)>0){
output_list_script <- outputdat$output_list_script %>% str_c(collapse="\n")
}else{
output_list_script <- ""
}
final_script <- str_c(collapse="\n",
"library(shiny)",
"",
#Widgets in ui------------",
ui_widgets_script,
"",
"#UI:",
ui_frame_script,
"",
"#Server",
"server <- function(input, output) {",
input_list_script,
output_list_script,
"}"
)
final_script
cat(final_script)
str_c(collapse="\n",
"library(shiny)",
"",
#Widgets in ui------------",
ui_widgets_script,
"",
"#UI:",
ui_frame_script,
"",
"#Server",
"server <- function(input, output) {",
input_list_script,
output_list_script,
"}"
)
final_script <- str_c(collapse="\n",c(
"library(shiny)",
"",
#Widgets in ui------------",
ui_widgets_script,
"",
"#UI:",
ui_frame_script,
"",
"#Server",
"server <- function(input, output) {",
input_list_script,
output_list_script,
"}")
)
cat(final_script)
output_list_script <- outputdat$output_list_script %>% str_c(collapse="\n")
output_list_script
runApp()
runApp()
runApp()
span
modalDialog(
title = "Skelton for shiny app",
span(style = "white-space: pre-line", final_script)
)
runApp()
runApp()
runApp()
runApp('test2.R')
runApp()
runApp('test2.R')
runApp()
runApp()
runApp()
runApp()
dat <- res()
dat
dat <- dat %>%
group_by(y) %>%
nest()
dat
runApp()
dat
runApp()
dat
dat
runApp()
dat <- dat %>%
group_by(y) %>%
nest()
dat
dat2 <- dat %>%
mutate(script = map(data,~{
adat <- .
min_x <- adat$x %>% min()
if(min_x == 1){
init_offset <- 0
}else{
init_offset <- min_x - 1
}
ascript <- adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId")) %>%
mutate(offset = if_else(x == min_x, init_offset, 0)) %>%
mutate(width = lead(x) - x) %>%
mutate(width = if_else(is.na(width), 12-x+1,width)) %>%
mutate(col_script = str_c("column(width = ", width, ", offset = ", offset,", ")) %>%
mutate(frame_script = str_c(col_script,"ui_",labelid,")")) %>%
mutate(argument = if_else(input_output == "inputId", str_c(",",argument),argument)) %>%
mutate(widget_script = str_c("ui_",labelid," <- ",widget,"(",input_output," = '",labelid, "'", argument,")"))
return(ascript)
})) %>%
mutate(
frame_script = map_chr(script, ~{
str_c("fluidRow(\n\t\t",
str_c(.$frame_script,collapse = ",\n\t\t"),
"\n\t)",
collapse = "")
})
) %>%
mutate(
ui_frame_script = map_chr(script, ~{
str_c(.$widget_script,collapse = "\n")
})
)
dat2 <- dat %>%
mutate(script = map(data,~{
browser()
adat <- .
min_x <- adat$x %>% min()
if(min_x == 1){
init_offset <- 0
}else{
init_offset <- min_x - 1
}
ascript <- adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId")) %>%
mutate(offset = if_else(x == min_x, init_offset, 0)) %>%
mutate(width = lead(x) - x) %>%
mutate(width = if_else(is.na(width), 12-x+1,width)) %>%
mutate(col_script = str_c("column(width = ", width, ", offset = ", offset,", ")) %>%
mutate(frame_script = str_c(col_script,"ui_",labelid,")")) %>%
mutate(argument = if_else(input_output == "inputId", str_c(",",argument),argument)) %>%
mutate(widget_script = str_c("ui_",labelid," <- ",widget,"(",input_output," = '",labelid, "'", argument,")"))
return(ascript)
})) %>%
mutate(
frame_script = map_chr(script, ~{
str_c("fluidRow(\n\t\t",
str_c(.$frame_script,collapse = ",\n\t\t"),
"\n\t)",
collapse = "")
})
) %>%
mutate(
ui_frame_script = map_chr(script, ~{
str_c(.$widget_script,collapse = "\n")
})
)
adat
adat <- .
adat
min_x <- adat$x %>% min()
if(min_x == 1){
init_offset <- 0
}else{
init_offset <- min_x - 1
}
init_offset <- min_x - 1
adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId"))
adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId")) %>%
mutate(offset = if_else(x == min_x, init_offset, 0))
adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId")) %>%
mutate(offset = if_else(x == min_x, init_offset, 0)) %>%
mutate(width = lead(x) - x) %>%
mutate(width = if_else(is.na(width), 12-x+1,width))
adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId")) %>%
mutate(offset = if_else(x == min_x, init_offset, 0)) %>%
mutate(width = lead(x) - x)
adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId")) %>%
mutate(offset = if_else(x == min_x, init_offset, 0)) %>%
mutate(width = lead(x) - x) %>%
mutate(width = if_else(is.na(width), 12-x+1,width))
adat
as.integer(-1)
ascript <- adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId")) %>%
mutate(offset = if_else(x == min_x, init_offset, 0)) %>%
mutate(width = lead(x) - x) %>%
mutate(width = if_else(is.na(width), as.integer(12-x+1), width))
ascript <- adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId")) %>%
mutate(offset = if_else(x == min_x, init_offset, 0)) %>%
mutate(width = lead(x) - x) %>%
mutate(width = if_else(is.na(width), as.integer(12-x+1), width)) %>%
mutate(col_script = str_c("column(width = ", width, ", offset = ", offset,", "))
ascript <- adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId")) %>%
mutate(offset = if_else(x == min_x, init_offset, 0)) %>%
mutate(width = lead(x) - x) %>%
mutate(width = if_else(is.na(width), as.integer(12-x+1), width)) %>%
mutate(col_script = str_c("column(width = ", width, ", offset = ", offset,", ")) %>%
mutate(frame_script = str_c(col_script,"ui_",labelid,")"))
ascript <- adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId")) %>%
mutate(offset = if_else(x == min_x, init_offset, 0)) %>%
mutate(width = lead(x) - x) %>%
mutate(width = if_else(is.na(width), as.integer(12-x+1), width)) %>%
mutate(col_script = str_c("column(width = ", width, ", offset = ", offset,", ")) %>%
mutate(frame_script = str_c(col_script,"ui_",labelid,")")) %>%
mutate(argument = if_else(input_output == "inputId", str_c(",",argument),argument))
ascript <- adat %>%
arrange(x) %>%
mutate(input_output = str_extract(widget,"Input$|Output$")) %>%
mutate(input_output = if_else(input_output=="Input","inputId","outputId")) %>%
mutate(offset = if_else(x == min_x, init_offset, 0)) %>%
mutate(width = lead(x) - x) %>%
mutate(width = if_else(is.na(width), as.integer(12-x+1), width)) %>%
mutate(col_script = str_c("column(width = ", width, ", offset = ", offset,", ")) %>%
mutate(frame_script = str_c(col_script,"ui_",labelid,")")) %>%
mutate(argument = if_else(input_output == "inputId", str_c(",",argument),argument)) %>%
mutate(widget_script = str_c("ui_",labelid," <- ",widget,"(",input_output," = '",labelid, "'", argument,")"))
runApp()
ui_frame_script <- str_c(
"ui <- fluidPage(\\n",
str_c(dat2$frame_script,collapse = ",\\n"),
"\\n)",
collapse = "\\n"
)
ui_widgets_script <- str_c(
str_c(dat2$ui_frame_script,collapse = "\\n")
)
ui_frame_script
ui_widgets_script <- str_c(
str_c(dat2$ui_frame_script,collapse = "\\n")
)
cat(ui_frame_script)
cat(ui_widgets_script)
#Server section
temp <- dat2 %>% select(script) %>% unnest(script)
temp
inputids <- temp %>% filter(input_output == "inputId") %>% pull(labelid)
inputids
outputdat <- temp %>% ungroup() %>%  filter(input_output == "outputId") %>%
mutate(renderthis = str_extract(widget,"^.+(?=Output)")) %>%
select(labelid, renderthis) %>%
mutate(Firstletter = str_to_upper(str_sub(renderthis,1,1))) %>%
mutate(remainingletters = str_sub(renderthis,2,nchar(renderthis))) %>%
mutate(Renderthis = str_c(Firstletter, remainingletters)) %>%
mutate(output_list_script = str_c("\\toutput$", labelid, "<- render", Renderthis, "({\\n})"))
if(length(inputids)>0){
input_list_script <- str_c("\\t#Ids for input$ are:", str_c(inputids,collapse = ", "))
}else{
input_list_script <- ""
}
runApp()
runApp()
runApp('test2.R')
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
?actionButton
?checkboxGroupInput
?checkboxInput
?dateInput
?dateRangeInput
?fileInput
?numericInput
?passwordInput
?radioButtons
?selectInput
?sliderInput
?submitButton
?textInput
?dataTableOutput
runApp()
shiny::runApp('test')
